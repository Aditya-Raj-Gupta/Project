import turicreate
import pandas as pd
import numpy as  np
import seaborn as sns
import matplotlib.pyplot as plt
admission_df = turicreate.SFrame('Admission_Predict.csv')
admission_df1 = pd.read_csv('Admission_Predict.csv')
admission_df.remove_column('Serial No.',inplace = True)
admission_df1.drop('Serial No.',axis=1,inplace=True)
admission_df.show()
sns.pairplot(admission_df1)
corr_matrix = admission_df1.corr()
plt.figure(figsize = (12,12))
sns.heatmap(corr_matrix,annot = True)
plt.show()
#input features
X = admission_df1.drop(columns = ['Chance of Admit '])
X.shape
y = admission_df1['Chance of Admit ']
y.shape
X = np.array(X)
y=np.array(y)
y=y.reshape(-1,1)
y.shape
from sklearn.preprocessing import StandardScaler, MinMaxScaler
scaler_x = StandardScaler()
X = scaler_x.fit_transform(X)
scaler_y = StandardScaler()
y = scaler_y.fit_transform(y)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15)
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, accuracy_score
LinearRegression_model = LinearRegression()
LinearRegression_model.fit(X_train,y_train)
accuracy_LinearRegression = LinearRegression_model.score(X_test,y_test)
accuracy_LinearRegression
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.optimizers import Adam
ANN_model = keras.Sequential()
ANN_model.add(Dense(50, input_dim = 7))
ANN_model.add(Activation('relu'))
ANN_model.add(Dense(150))
ANN_model.add(Activation('relu'))
ANN_model.add(Dropout(0.5))
ANN_model.add(Dense(150))
ANN_model.add(Activation('relu'))
ANN_model.add(Dropout(0.5))
ANN_model.add(Dense(50))
ANN_model.add(Activation('linear'))
ANN_model.add(Dense(1))
ANN_model.compile(loss = 'mse', optimizer = 'adam')
ANN_model.summary()
ANN_model.compile(optimizer = 'adam', loss = 'mean_squared_error')
epochs_hist = ANN_model.fit(X_train, y_train, epochs = 100, batch_size = 20)
result = ANN_model.evaluate(X_test, y_test)
accuracy_ANN = 1-result
print("Accuracy: {}".format(accuracy_ANN))
plt.plot(epochs_hist.history['loss'])
plt.title('Models Loss Process during Training')
plt.xlabel('epoch')
plt.ylabel('Training Loss')
plt.legend(['Training Loss'])
y_predict = LinearRegression_model.predict(X_test)
plt.plot(y_test, y_predict,'*')
k = X_test.shape[1]
n = len(X_test)
n
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from math import sqrt
RMSE = float(format(np.sqrt(mean_squared_error(y_test_orig, y_predict_orig)),'.3f'))
MSE = mean_squared_error(y_test_orig,y_predict_orig)
MAE = mean_absolute_error(y_test_orig, y_predict_orig)
r2 = r2_score(y_test_orig,y_predict_orig)
adj_r2 = 1 - (1-r2)*(n-1)/(n-k-1)
print('RMSE =',RMSE,'\nMSE=',MSE, '\nMAE=',MAE, '\nR2=', r2, '\nAdjusted R2=',adj_r2)
